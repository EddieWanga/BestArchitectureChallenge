// Mocks generated by Mockito 5.0.10 from annotations
// in best_architecture_challenge/test/features/fetch_posts/presentation/bloc/fetch_posts_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:best_architecture_challenge/core/failures.dart' as _i6;
import 'package:best_architecture_challenge/features/fetch_posts/domain/entities/post.dart'
    as _i7;
import 'package:best_architecture_challenge/features/fetch_posts/domain/repositories/fetch_posts_repository.dart'
    as _i2;
import 'package:best_architecture_challenge/features/fetch_posts/domain/usecases/fetch_posts.dart'
    as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeFetchPostsRepository extends _i1.Fake
    implements _i2.FetchPostsRepository {}

class _FakeEither<L, R> extends _i1.Fake implements _i3.Either<L, R> {
  @override
  String toString() => super.toString();
}

/// A class which mocks [FetchPosts].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchPosts extends _i1.Mock implements _i4.FetchPosts {
  MockFetchPosts() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FetchPostsRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeFetchPostsRepository()) as _i2.FetchPostsRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Post>>> call(
          _i4.FetchPostsParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<_i3.Either<_i6.Failure, List<_i7.Post>>>.value(
              _FakeEither<_i6.Failure, List<_i7.Post>>())) as _i5
          .Future<_i3.Either<_i6.Failure, List<_i7.Post>>>);
}
